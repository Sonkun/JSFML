<project name="JSFML" default="help">
	<description>
		JSFML build file for Apache Ant.
	</description>

	<!-- Environment -->
	<property environment="env" />

    <condition property="isWindows">
        <os family="windows" />
    </condition>

    <condition property="isMac">
        <os family="mac" />
    </condition>

    <condition property="isLinux">
        <os family="unix" />
    </condition>

	<!-- OS properties -->
	<property name="linux.prefix" value="/usr/local" />

	<!-- JSFML properties -->
	<property name="jsfml.package" value="sfml" />
	<property name="jsfml.version" value="2.0.0" />
	<property name="jsfml.out" location="./out" />

	<!-- Java properties -->
	<property name="java.src" location="./src" />
	<property name="java.out" location="${jsfml.out}/classes" />
	<property name="java.classpath" value="${java.out}" />

	<!-- JNI properties -->
	<property name="jni.out" location="${jsfml.out}/include" />

	<!-- Javadoc properties -->
	<property name="javadoc.out" location="./out/doc" />

	<!-- Jar properties -->
	<property name="jar.file" value="${jsfml.out}/jsfml.jar" />
	<property name="jarsigner.alias" value="pdinklag" />

	<!-- C++ properties -->
	<property name="cpp.src" location="./jni/src" />
	<property name="cpp.include" location="./jni/include" />
	<property name="cpp.obj" location="${jsfml.out}/obj" />
	<property name="cpp.out" location="${jsfml.out}/bin" />

	<!-- Compile Java -->
	<target name="compile" description="Compile the Java sources.">
		<mkdir dir="${java.out}" />
		<javac includeAntRuntime="false" srcdir="${java.src}" destdir="${java.out}" classpath="${java.classpath}" />

	</target>

	<!-- Generate headers -->
	<target name="headers" description="Generate the C++ JNI headers." depends="compile">
		<mkdir dir="${jni.out}/JSFML/JNI" />
		<javah destdir="${jni.out}/JSFML/JNI" classpath="${java.classpath}">
			<!-- internal -->
			<class name="${jsfml.package}.internal.ExPtr" />
			<class name="${jsfml.package}.internal.SFMLErrorCapture" />
			<class name="${jsfml.package}.internal.SFMLInputStream$NativeStreamRef" />
			<class name="${jsfml.package}.internal.SFMLNative" />

			<!-- window -->
			<class name="${jsfml.package}.window.Context" />
			<class name="${jsfml.package}.window.Joystick" />
			<class name="${jsfml.package}.window.Keyboard" />
			<class name="${jsfml.package}.window.Mouse" />
			<class name="${jsfml.package}.window.VideoMode" />
			<class name="${jsfml.package}.window.Window" />

			<!-- graphics -->
			<class name="${jsfml.package}.graphics.CircleShape" />
			<class name="${jsfml.package}.graphics.ConvexShape" />
			<class name="${jsfml.package}.graphics.Font" />
			<class name="${jsfml.package}.graphics.Image" />
			<class name="${jsfml.package}.graphics.RectangleShape" />
			<class name="${jsfml.package}.graphics.RenderTexture" />
			<class name="${jsfml.package}.graphics.RenderWindow" />
			<class name="${jsfml.package}.graphics.SFMLNativeDrawer" />
			<class name="${jsfml.package}.graphics.SFMLNativeTransformable" />
			<class name="${jsfml.package}.graphics.Shader" />
			<class name="${jsfml.package}.graphics.Shape" />
			<class name="${jsfml.package}.graphics.Sprite" />
			<class name="${jsfml.package}.graphics.Text" />
			<class name="${jsfml.package}.graphics.Texture" />
			<class name="${jsfml.package}.graphics.View" />

			<!-- audio -->
			<class name="${jsfml.package}.audio.Listener" />
			<class name="${jsfml.package}.audio.Music" />
			<class name="${jsfml.package}.audio.Sound" />
			<class name="${jsfml.package}.audio.SoundBuffer" />
			<class name="${jsfml.package}.audio.SoundBufferRecorder" />
			<class name="${jsfml.package}.audio.SoundRecorder" />
			<class name="${jsfml.package}.audio.SoundSource" />
			<class name="${jsfml.package}.audio.SoundStream" />
		</javah>
	</target>

	<!-- Compile C++ for Mac OS X -->
	<target name="macosx" description="Build the C++ sources for Mac OS X Universal binary." if="isMac">

		<!-- Requires ${arch} -->
		<delete file="${cpp.out}/libsfml.jnilib" />
		<mkdir dir="${cpp.obj}" />
		<mkdir dir="${cpp.out}" />

		<!-- get source files -->
		<fileset id="cpp.src.fileset" dir="${cpp.src}">
			<include name="Intercom/*.cpp" />
			<include name="JNI/*.cpp" />
		</fileset>
		<pathconvert pathsep=" " property="cpp.src.files" refid="cpp.src.fileset"/>

		<!-- compile and link -->
		<exec executable="g++" dir="${cpp.obj}" failonerror="true">
			<arg value="-I${cpp.include}" />
			<arg value="-I${sfml.include}" />
			<arg value="-I${env.JAVA_HOME}/include" />
			<arg value="-I${env.JAVA_HOME}/include/darwin" />
			<arg value="-dynamiclib" />
			<arg value="-arch" />
			<arg value="i386" />
			<arg value="-arch" />
			<arg value="x86_64" />
			<arg value="-o" />
			<arg value="${cpp.out}/libsfml.jnilib" />
			<arg value="-Wl,-L${sfml.bin},-lsfml-system,-lsfml-window,-lsfml-graphics,-lsfml-audio" />
			<arg line="${cpp.src.files}" />
		</exec>

		<!-- edit load path of the libjsfml.jnilib's dependencies -->
		<exec executable="install_name_tool" dir="${cpp.out}/" failonerror="true">
			<arg value="-id" />
			<arg value="libjsfml.jnilib" />
			<arg value="libjsfml.jnilib" />
		</exec>
		<exec executable="install_name_tool" dir="${cpp.out}/" failonerror="true">
			<arg value="-change" />
			<arg value="libsfml-system.dylib" />
			<arg value="@loader_path/libsfml-system.dylib" />
			<arg value="-change" />
			<arg value="libsfml-window.dylib" />
			<arg value="@loader_path/libsfml-window.dylib" />
			<arg value="-change" />
			<arg value="libsfml-graphics.dylib" />
			<arg value="@loader_path/libsfml-graphics.dylib" />
			<arg value="-change" />
			<arg value="libsfml-audio.dylib" />
			<arg value="@loader_path/libsfml-audio.dylib" />
			<arg value="libjsfml.jnilib" />
		</exec>

		<copy todir="${cpp.out}">
			<fileset dir="${sfml.bin}" includes="*.dylib" />
		</copy>

		<checksum>
			<fileset dir="${cpp.out}" includes="*.jnilib *.dylib" />
		</checksum>
	</target>

	<!-- Compile C++ for Linux - not to be used directly, use either linux32 or linux64 -->
	<target name="linux" if="isLinux">

		<delete file="${cpp.out}/libsfml.so" />
		<mkdir dir="${cpp.out}" />
		<mkdir dir="${cpp.obj}" />

		<!-- get source files -->
		<fileset id="cpp.src.fileset" dir="${cpp.src}">
			<include name="Intercom/*.cpp" />
			<include name="JNI/*.cpp" />
		</fileset>
		<pathconvert pathsep=" " property="cpp.src.files" refid="cpp.src.fileset"/>

		<!-- compile and link -->
		<exec executable="g++" dir="${cpp.obj}" failonerror="true">
			<arg value="-I${cpp.include}" />
			<arg value="-I${jni.out}" />
			<arg value="-I${env.JAVA_HOME}/include" />
			<arg value="-shared" />
			<arg value="-fPIC" />
			<arg value="-o${cpp.out}/libsfml.so" />
			<arg line="${cpp.src.files}" />
			<arg value="-Wl,-no-undefined,-lsfml-audio,-lsfml-graphics,-lsfml-window,-lsfml-system" />
		</exec>
	</target>

	<!-- Compile C++ for Windows - not to be used directly, use either win32 or win64 -->
	<target name="windows" if="isWindows">

		<!-- Requires ${cl}, ${link}, ${cwd}, ${winsdk.lib} and ${vs.lib} -->
		<delete file="${cpp.out}/${arch}/jsfml.dll" />
		<mkdir dir="${cpp.obj}" />
		<mkdir dir="${cpp.out}" />

		<!-- compile -->
		<exec executable="cl.exe" failonerror="true">
			<arg value="/nologo" />
			<arg value="/c" />
			<arg value="/Ox" />
			<arg value="/EHsc" />
			<arg value="/I${cpp.include}" />
			<arg value="/I${jni.out}" />
			<arg value="/I${env.JAVA_HOME}/include" />
			<arg value="/I${env.JAVA_HOME}/include/win32" />
			<arg value="${cpp.src}/Intercom/*.cpp" />
			<arg value="${cpp.src}/JNI/*.cpp" />
			<arg value="/Fo${cpp.obj}/" />
		</exec>

		<!-- link -->
		<exec executable="link.exe" failonerror="true">
			<arg value="/nologo" />
			<arg value="/DLL" />
			<arg value="/OUT:${cpp.out}/jsfml.dll" />
			<arg value="sfml-main.lib" />
			<arg value="sfml-system.lib" />
			<arg value="sfml-window.lib" />
			<arg value="sfml-graphics.lib" />
			<arg value="sfml-audio.lib" />
			<arg value="${cpp.obj}/*.obj" />
		</exec>

		<delete file="${cpp.out}/jsfml.exp" />
		<delete file="${cpp.out}/jsfml.lib" />
	</target>

	<!-- MD5 -->
	<target name="md5" description="Calculate MD5 checksums for all production files and generate the corresponding files.">
		<checksum>
			<fileset dir="${cpp.out}" includes="**/*.dll **/*.so **/*.jnilib **/*.dylib" />
		</checksum>
	</target>

	<!-- Jar -->
	<target name="jar" description="Generate the JAR file." depends="compile">
		<jar destfile="${jar.file}">
			<fileset dir="${java.out}" includes="**/*.class" />
			<fileset dir="${jsfml.out}" includes="**/*.MD5" />
			<manifest>
				<attribute name="Built-By" value="${user.name}"/>
				<section name="common">
					<attribute name="Specification-Title" value="JSFML" />
					<attribute name="Specification-Version" value="1.0" />
					<attribute name="Specification-Vendor" value="Patrick Dinklage" />
					<attribute name="Implementation-Title" value="sfml" />
					<attribute name="Implementation-Version" value="${jsfml.version}" />
					<attribute name="Implementation-Vendor" value="Patrick Dinklage" />
				</section>
				<section name="sfml/">
					<attribute name="Sealed" value="true"/>
				</section>
				<section name="sfml/internal">
					<attribute name="Sealed" value="true"/>
				</section>
				<section name="sfml/system/">
					<attribute name="Sealed" value="true"/>
				</section>
				<section name="sfml/window/">
					<attribute name="Sealed" value="true"/>
				</section>
				<section name="jsfml/window/event/">
					<attribute name="Sealed" value="true"/>
				</section>
				<section name="sfml/graphics/">
					<attribute name="Sealed" value="true"/>
				</section>
				<section name="sfml/audio/">
					<attribute name="Sealed" value="true"/>
				</section>
			</manifest>
		</jar>
	</target>

	<!-- Sign jar -->
	<target name="signjar" description="Sign the jar with the password given by the user.">
		<input message="Please enter keystore password (or empty to skip signing):" addproperty="storepass" />
		<signjar jar="${jar.file}" alias="${jarsigner.alias}" storepass="${storepass}" lazy="true" />
	</target>

	<!-- Javadoc -->
	<target name="javadoc" description="Generate the Javadoc.">
		<mkdir dir="${javadoc.out}" />
		<javadoc
			sourcepath="${java.src}"
			destdir="${javadoc.out}"
			windowtitle="JSFML API"
			link="http://docs.oracle.com/javase/7/docs/api/"
			/>
	</target>

	<!-- Compile everything -->
	<target name="make" description="Compile everything.">
        <antcall target="headers" />
        <antcall target="compile" />
        <antcall target="windows" />
        <antcall target="macosx" />
        <antcall target="linux" />
        <antcall target="jar" />
	</target>

	<!-- Install everything -->
	<target name="install" description="Install everything.">

		<copy tofile="${linux.prefix}/share/java/sfml-${jsfml.version}.jar">
			<fileset file="${jar.file}" />
		</copy>

		<copy todir="${linux.prefix}/lib/jni">
			<fileset file="${jsfml.out}/bin/linux/libsfml.so" />
		</copy>


	</target>

	<!-- Clean everything -->
	<target name="clean" description="Clean up everything.">
		<delete dir="${jsfml.out}" />
		<delete dir="${examples.out}" />
		<delete dir="${javadoc.out}" />
	</target>

	<!-- Generate the documentation. -->
	<target name="doc" description="Generate the documentation.">
		<antcall target="javadoc" />
	</target>

	<!-- Show a helper message -->
	<target name="help" description="Display instructions on how to use this buildfile.">
		<echo>
JSFML Build Script
==================
make    -- Compile everything
install -- Install everything
clean   -- Clean everything
doc     -- Generate the documentation
help    -- Show this message
version -- Print out the current version

compile -- Compiles the Java sources to out/classes
jar     -- Generates the JSFML jar file in out.
signjar -- Signs the generated JAR file.
javadoc -- Generates the Javadoc in javadoc.

headers -- Generates JNI headers in include/JSFML/JNI.
windows -- Compiles and links the C++ sources for Windows
linux   -- Compiles and links the C++ sources for Linux
macosx  -- Compiles and links the C++ sources for Mac OS X.
		</echo>
	</target>

	<!-- Generate the documentation. -->
	<target name="version" description="Print out the JSFML version.">
		<echo message="${jsfml.version}" />
	</target>
</project>
